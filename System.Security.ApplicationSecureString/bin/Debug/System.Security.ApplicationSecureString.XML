<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Security.ApplicationSecureString</name>
    </assembly>
    <members>
        <member name="T:System.Security.ApplicationSecureString">
            <summary>
            ApplicationSecureString is a Direct replacement for String for all Results, Members, Properties, or as a Parameter.
            </summary>
        </member>
        <member name="M:System.Security.ApplicationSecureString.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:System.Security.ApplicationSecureString.#ctor(System.Security.SecureString)">
            <summary>
            Constructor using SecureString.
            </summary>
            <param name="argSecureString">SecureString to copy and wrap.</param>
        </member>
        <member name="M:System.Security.ApplicationSecureString.#ctor(System.Char[])">
            <summary>
            Constructor using Char[].
            </summary>
            <param name="argCharacters">Char[] to encrypt.</param>
        </member>
        <member name="M:System.Security.ApplicationSecureString.#ctor(System.String)">
            <summary>
            Constructor using String.
            </summary>
            <param name="argString">String to encrypt.</param>
        </member>
        <member name="M:System.Security.ApplicationSecureString.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:System.Security.ApplicationSecureString.CreateUnsecuredString">
            <summary>
                Copies the string in this instance to a Unicode characters.
            </summary>
            <returns> A Unicode string whose elements are the individual characters of this
                instance. If this instance is an empty string, the returned string is empty and
                has a zero length.
            </returns>
        </member>
        <member name="M:System.Security.ApplicationSecureString.CreateUnsecuredCharacters">
            <summary>
                Copies the characters in this instance to a Unicode character array.
            </summary>
            <returns> A Unicode character array whose elements are the individual characters of this
                instance. If this instance is an empty string, the returned array is empty and
                has a zero length.
            </returns>
        </member>
        <member name="M:System.Security.ApplicationSecureString.CreateStringDisposable">
            <summary>
            Create StringDisposable() and apply the 'IDisposable' using(var stringDisposable = ApplicationSecureString.CreateStringDisposable()){ do stuff in here. }
            </summary>
        </member>
        <member name="M:System.Security.ApplicationSecureString.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object. 
            However, we will be using the internal SecureString to determine equality of the content.     
            </summary>
            <param name="argObject">The System.Object to compare with the current System.Object</param>
            <returns>true if the specified System.Object is equal to the current System.Object; otherwise, False.</returns>
        </member>
        <member name="M:System.Security.ApplicationSecureString.Equals(System.Security.ApplicationSecureString)">
            <summary>
            Determines whether the specified ApplicationSecureString is equal to the current ApplicationSecureString. 
            However, we will be using the internal SecureString to determine equality of the content.     
            </summary>
            <param name="argApplicationSecureString">The ApplicationSecureStringt to compare with the current ApplicationSecureString</param>
            <returns>true if the specified System.Object is equal to the current System.Object; otherwise, False.</returns>
        </member>
        <member name="M:System.Security.ApplicationSecureString.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the internal SecureString.</returns>
        </member>
        <member name="M:System.Security.ApplicationSecureString.ToString">
            <summary>
             Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object.</returns>
        </member>
        <member name="M:System.Security.ApplicationSecureString.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Reads from System.Runtime.Serialization.SerializationInfo the data needed to deserialize the target object.
            </summary>
            <param name="argSerializationInfo">The System.Runtime.Serialization.SerializationInfo to populate with data.</param>
            <param name="argStreamingContext">The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.</param>
        </member>
        <member name="M:System.Security.ApplicationSecureString.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="argSerializationInfo">The System.Runtime.Serialization.SerializationInfo to populate with data.</param>
            <param name="argStreamingContext">The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.</param>
        </member>
        <member name="M:System.Security.ApplicationSecureString.Dispose">
            <summary>
            Releases all resources used by the internal System.Security.SecureString object.
            </summary>
        </member>
        <member name="M:System.Security.ApplicationSecureString.op_Implicit(System.String)~System.Security.ApplicationSecureString">
            <summary>
            Converts a String into a ApplicationSecureString.
            </summary>
            <param name="argString">String</param>
        </member>
        <member name="M:System.Security.ApplicationSecureString.op_Implicit(System.Char[])~System.Security.ApplicationSecureString">
            <summary>
            Converts a Char[] into a ApplicationSecureString.
            </summary>
            <param name="argCharacters">Char[]</param>
        </member>
        <member name="M:System.Security.ApplicationSecureString.op_Implicit(System.Security.ApplicationSecureString)~System.String">
            <summary>
            Converts ApplicationSecureString into a String.
            </summary>
            <param name="argApplicationSecureString">ApplicationSecureString</param>
        </member>
        <member name="M:System.Security.ApplicationSecureString.op_Implicit(System.Security.ApplicationSecureString)~System.Char[]">
            <summary>
             Converts ApplicationSecureString into a Char[].
            </summary>
            <param name="argApplicationSecureString">ApplicationSecureString</param>
        </member>
        <member name="M:System.Security.ApplicationSecureString.op_Equality(System.Security.ApplicationSecureString,System.Security.ApplicationSecureString)">
            <summary>
                Determines whether two specified ApplicationSecureString have the same value.
            </summary>
            <param name="argApplicationSecureStringA">The first ApplicationSecureString to compare, or null</param>
            <param name="argApplicationSecureStringB">The second ApplicationSecureString to compare, or null</param>
            <returns>true if the value of argApplicationSecureStringA is the same as the value of argApplicationSecureStringB; otherwise, false.</returns>
        </member>
        <member name="M:System.Security.ApplicationSecureString.op_Inequality(System.Security.ApplicationSecureString,System.Security.ApplicationSecureString)">
            <summary>
                Determines whether two specified strings have different values.        
            </summary>
            <param name="argApplicationSecureStringA">The first ApplicationSecureString to compare, or null.</param>
            <param name="argApplicationSecureStringB">The second ApplicationSecureString to compare, or null.</param>
            <returns>true if the value of argApplicationSecureStringA is different from the value of argApplicationSecureStringB; otherwise, false.</returns>
        </member>
        <member name="P:System.Security.ApplicationSecureString.SecureContext">
            <summary>
            Provides an encrypted String that is Base 64 encoded for transport..
            </summary>
        </member>
        <member name="M:System.Security.ApplicationSecureString.ApplicationSecureStringEqual(System.Security.ApplicationSecureString,System.Security.ApplicationSecureString)">
            <summary>
             Determines whether two specified ApplicationSecureString have the same value.
            </summary>
            <param name="argApplicationSecureStringA">>The first string to compare, or null.</param>
            <param name="argApplicationSecureStringB">The second string to compare, or null.</param>
            <returns>true if the value of argApplicationSecureStringA is the same as the value of argApplicationSecureStringB; otherwise, false.</returns>
        </member>
        <member name="T:System.Security.ApplicationSecureString.StringDisposable">
            <summary>
            Provides a wrapper around a pinned string with the IDisposable interface that will Zero the memory an release it when called
            </summary>
        </member>
        <member name="M:System.Security.ApplicationSecureString.StringDisposable.#ctor">
            <summary>
            Blocks public creation.
            </summary>
        </member>
        <member name="M:System.Security.ApplicationSecureString.StringDisposable.#ctor(System.Char[])">
            <summary>
            Creates an internal String that is pinned in memory so that It may be released on Dispose();
            </summary>
            <param name="argCharacters"></param>
        </member>
        <member name="M:System.Security.ApplicationSecureString.StringDisposable.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:System.Security.ApplicationSecureString.StringDisposable.Dispose">
            <summary>
            Releases all resources used by the internal System.String object via ZeroMemory.
            </summary>   
        </member>
        <member name="P:System.Security.ApplicationSecureString.StringDisposable.UnsecuredString">
            <summary>
            A string pinned in memory until it is disposed.
            </summary>
        </member>
        <member name="M:System.Security.ApplicationSecureString.StringDisposable.op_Implicit(System.Security.ApplicationSecureString.StringDisposable)~System.String">
            <summary>
            Presents StringDisposable as String.
            </summary>
            <param name="argStringDisposable">argStringDisposable</param>
        </member>
        <member name="M:System.Security.ApplicationSecureString.StringDisposable.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object. 
            However, we will be using the internal String to determine equality of the content.     
            </summary>
            <param name="argObject">The System.Object to compare with the current System.Object</param>
            <returns>true if the specified System.Object is equal to the current System.Object; otherwise, False.</returns>
        </member>
        <member name="M:System.Security.ApplicationSecureString.StringDisposable.Equals(System.Security.ApplicationSecureString.StringDisposable)">
            <summary>
            Determines whether the specified StringDisposable is equal to the current StringDisposable. 
            However, we will be using the internal SecureString to determine equality of the content.     
            </summary>
            <param name="argStringDisposable">The StringDisposable to compare with the current StringDisposable</param>
            <returns>true if the specified System.Object is equal to the current System.Object; otherwise, False.</returns>
        </member>
        <member name="M:System.Security.ApplicationSecureString.StringDisposable.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the internal SecureString.</returns>
        </member>
        <member name="M:System.Security.ApplicationSecureString.StringDisposable.ToString">
            <summary>
             Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object.</returns>
        </member>
        <member name="M:System.Security.ApplicationSecureString.StringDisposable.op_Equality(System.Security.ApplicationSecureString.StringDisposable,System.Security.ApplicationSecureString.StringDisposable)">
            <summary>
                Determines whether two specified StringDisposable have the same value.
            </summary>
            <param name="argStringDisposableA">The first StringDisposable to compare, or null</param>
            <param name="argStringDisposableB">The second StringDisposable to compare, or null</param>
            <returns>true if the value of argStringDisposableA is the same as the value of argStringDisposableB; otherwise, false.</returns>
        </member>
        <member name="M:System.Security.ApplicationSecureString.StringDisposable.op_Inequality(System.Security.ApplicationSecureString.StringDisposable,System.Security.ApplicationSecureString.StringDisposable)">
            <summary>
                Determines whether two specified StringDisposable have different values.        
            </summary>
            <param name="argStringDisposableA">The first StringDisposable to compare, or null.</param>
            <param name="argStringDisposableB">The second StringDisposable to compare, or null.</param>
            <returns>true if the value of argStringDisposableA is different from the value of argStringDisposableB; otherwise, false.</returns>
        </member>
        <member name="M:System.Security.ApplicationSecureString.StringDisposable.StringDisposableEqual(System.Security.ApplicationSecureString.StringDisposable,System.Security.ApplicationSecureString.StringDisposable)">
            <summary>
             Determines whether two specified StringDisposable have the same value.
            </summary>
            <param name="argStringDisposableA">>The first string to compare, or null.</param>
            <param name="argStringDisposableB">The second string to compare, or null.</param>
            <returns>true if the value of argStringDisposableA is the same as the value of argStringDisposableB; otherwise, false.</returns>
        </member>
        <member name="T:System.Security.ApplicationSecureString.StringDisposable.EmptyWhiteSpace">
            <summary>
            Provides empty byte array for overwriting strings.
            </summary>
        </member>
        <member name="M:System.Security.ApplicationSecureString.StringDisposable.EmptyWhiteSpace.#cctor">
            <summary>
            Create default empty string.
            </summary>
        </member>
        <member name="M:System.Security.ApplicationSecureString.StringDisposable.EmptyWhiteSpace.GetAutoExpandingWhiteSpaceByteArray(System.Int32)">
            <summary>
            Provides an empty byte array to overwrite string with sensitive data. 
            </summary>
            <param name="argLength">New max length of empty string if greater.</param>
            <returns></returns>
        </member>
        <member name="T:System.Security.Library.Extentions.ApplicationSecureStringExtensions">
            <summary>
            SecureString Extensions.
            </summary>
        </member>
        <member name="M:System.Security.Library.Extentions.ApplicationSecureStringExtensions.CreateSecureString(System.String)">
            <summary>
            Creates a SecureString from a String.
            </summary>
            <param name="argString">String is used to create a SecureString.</param>
            <returns>SecureString</returns>
        </member>
        <member name="M:System.Security.Library.Extentions.ApplicationSecureStringExtensions.CreateSecureString(System.Char[])">
            <summary>
            Creates a SecureString from a Char[].
            </summary>
            <param name="argCharacters">Char[] is used to create a SecureString.</param>
            <returns>SecureString</returns>
        </member>
        <member name="M:System.Security.Library.Extentions.ApplicationSecureStringExtensions.CreateUnencryptedString(System.Security.SecureString)">
            <summary>
            Creates a String from a SecureString.
            </summary>
            <param name="argSecureString">SecureString to be Unencrypted.</param>
            <returns>String</returns>
        </member>
        <member name="M:System.Security.Library.Extentions.ApplicationSecureStringExtensions.CreateUnencryptedCharacters(System.Security.SecureString)">
            <summary>
            Creates a Char[] from a SecureString.
            </summary>
            <param name="argSecureString">SecureString to be Unencrypted.</param>
            <returns>Char[]</returns>
        </member>
        <member name="M:System.Security.Library.Extentions.ApplicationSecureStringExtensions.CreateBase64EncodedString(System.Char[])">
            <summary>
            Convert Char[] to base64 encoding.
            </summary>
            <param name="argCharacters">Char[] to convert.</param>
            <returns>Base 64 Encoding.</returns>
        </member>
        <member name="M:System.Security.Library.Extentions.ApplicationSecureStringExtensions.CreateBase64EncodedString(System.Byte[])">
            <summary>
            Convert Byte[] to base64 encoding.
            </summary>
            <param name="argBytes">Byte[] to convert.</param>
            <returns>Base 64 Encoding.</returns>
        </member>
        <member name="M:System.Security.Library.Extentions.ApplicationSecureStringExtensions.CreateBase64EncodedCharacters(System.Byte[])">
            <summary>
            Convert Byte[] to base64 encoded Char[].
            </summary>
            <param name="argBytes">Byte[] to convert.</param>
            <returns>Base 64 Encoded Char[].</returns>
        </member>
        <member name="M:System.Security.Library.Extentions.ApplicationSecureStringExtensions.CreateCharacters(System.String)">
            <summary>
            Convert  String to Char[].
            </summary>
            <param name="argString">String to convert.</param>
            <returns>Char[]</returns>
        </member>
        <member name="M:System.Security.Library.Extentions.ApplicationSecureStringExtensions.CreateCharactersFromBase64EncodedString(System.String)">
            <summary>
            Convert base64 encoded String to Char[].
            </summary>
            <param name="argString">base64 encoded String to convert.</param>
            <returns>Char[]</returns>
        </member>
        <member name="M:System.Security.Library.Extentions.ApplicationSecureStringExtensions.CreateBytesFromBase64EncodedString(System.String)">
            <summary>
            Convert base64 encoded String to Byte[].
            </summary>
            <param name="argString">base64 encoded String to convert.</param>
            <returns>Byte[]</returns>
        </member>
        <member name="M:System.Security.Library.Extentions.ApplicationSecureStringExtensions.CreateBase64EncodedString(System.String)">
            <summary>
            Convert String to base64 encoding.
            </summary>
            <param name="argString">String to convert.</param>
            <returns>Base 64 Encoding.</returns>
        </member>
        <member name="M:System.Security.Library.Extentions.ApplicationSecureStringExtensions.CreateStringBase64String(System.String)">
            <summary>
            Convert base64 encoded String to String.
            </summary>
            <param name="argString">base64 encoded String to convert.</param>
            <returns>String</returns>
        </member>
        <member name="M:System.Security.Library.Extentions.ApplicationSecureStringExtensions.ClearCharacters(System.Char[])">
            <summary>
            Copies '/0' to all elements of the array.
            </summary>
            <param name="argCharacters">Array to be over written with '/0'.</param>
        </member>
        <member name="M:System.Security.Library.Extentions.ApplicationSecureStringExtensions.ClearBytes(System.Byte[])">
            <summary>
            Copies '/0' to all elements of the array.
            </summary>
            <param name="argBytes">Array to be over written with '/0'.</param>
        </member>
        <member name="M:System.Security.Library.Extentions.ApplicationSecureStringExtensions.CreateCharacters(System.Byte[])">
            <summary>
            Convert Byte[] to Char[];
            </summary>
            <param name="argBytes">Byte[] to convert.</param>
            <returns>Char[]</returns>
        </member>
        <member name="M:System.Security.Library.Extentions.ApplicationSecureStringExtensions.CreateBytes(System.Char[])">
            <summary>
            Convert Char[] to Byte[];
            </summary>
            <param name="argCharacters">Char[] to convert.</param>
            <returns>Byte[]</returns>
        </member>
        <member name="M:System.Security.Library.Extentions.ApplicationSecureStringExtensions.CreateBytes(System.String)">
            <summary>
            Convert String to Byte[];
            </summary>
            <param name="argString">String to convert.</param>
            <returns>Byte[]</returns>
        </member>
        <member name="M:System.Security.Library.Extentions.ApplicationSecureStringExtensions.CreateString(System.Char[])">
            <summary>
            Convert Char[] to Byte[];
            </summary>
            <param name="argCharacters">Char[] to convert.</param>
            <returns>Byte[]</returns>
        </member>
    </members>
</doc>
